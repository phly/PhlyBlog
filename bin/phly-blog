#!/usr/bin/env php
<?php
/**
 * @link      https://github.com/phly/PhlyBlog for the canonical source repository
 * @copyright Copyright (c) 2020 Matthew Weier O'Phinney (http://mwop.net)
 * @license   https://github.com/weierophinney/PhlyBlog/blog/master/LICENSE New BSD License
 */

namespace PhlyBlog;

use PackageVersions\Versions;
use RuntimeException;
use Symfony\Component\Console\Application as ConsoleApplication;
use Symfony\Component\Console\CommandLoader\ContainerCommandLoader;
use Zend\Mvc\Application as MvcApplication;
use Zend\Stdlib\ArrayUtils;

// Setup/verify autoloading
$cwd = getcwd();
if (is_dir($cwd . '/vendor')) {
    echo "Using project autoloader based on current working directory\n";
    chdir($cwd);
    require 'vendor/autoload.php';
} elseif (file_exists($a = __DIR__ . '/../../../autoload.php')) {
    echo "Using project autoloader\n";
    require $a;
} elseif (file_exists($a = __DIR__ . '/../vendor/autoload.php')) {
    echo "Using project autoloader relative to bin directory\n";
    require $a;
} elseif (file_exists($a = __DIR__ . '/../autoload.php')) {
    echo "Using project autoloader relative to vendor directory\n";
    require $a;
} else {
    fwrite(STDERR, 'Cannot locate autoloader; please run "composer install"' . PHP_EOL);
    exit(1);
}

if (! class_exists(MvcApplication::class)) {
    throw new RuntimeException(
        "Unable to load application.\n"
        . "- Type `composer install` if you are developing locally.\n"
        . "- Type `vagrant ssh -c 'composer install'` if you are using Vagrant.\n"
        . "- Type `docker-compose run zf composer install` if you are using Docker.\n"
    );
}

// Retrieve configuration
if (! file_exists('./config/application.config.php')) {
    throw new RuntimeException(
        "This command can only be run within a standard zend-mvc application.\n"
    );
}

$appConfig = require './config/application.config.php';
if (file_exists('./config/development.config.php')) {
    $appConfig = ArrayUtils::merge($appConfig, require './config/development.config.php');
}

// Initialize the container
$container = MvcApplication::init($appConfig)->getServiceManager();

// Create the command loader
$commandLoader = new ContainerCommandLoader($container, [
        // Command alias => Command controller
]);

// Get the version
$version = strstr(Versions::getVersion('phly/phly-blog'), '@', true);

// Create and execute the application
$application = new ConsoleApplication('phly-blog', $version);
$application->setCommandLoader($commandLoader);
$application->run();
